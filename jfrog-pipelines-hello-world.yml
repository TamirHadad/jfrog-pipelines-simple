template: true   # required for local templates
valuesFilePath: ./values.yml

resources:
  - name: myFirstRepo
    type: GitRepo
    configuration:
      # SCM integration where the repository is located
      gitProvider: {{ .Values.myRepo.gitProvider }} # this will be replaced from values.yml
      # Repository path, including org name/repo name
      path: {{ .Values.myRepo.path }} # this will be replaced from values.yml
      branches:
        # Specifies which branches will trigger dependent steps
        include: master

  - name: myPropertyBag
    type: PropertyBag
    configuration:
      commitSha: 1
      runID: 1

pipelines:
  - name: my_first_pipeline
    configuration:
      environmentVariables:
        readOnly:
          NUMBER_OF_NODES_IN_NODEPOOL:
            description: "test"
            default: "test"
            allowCustom: true
          NUMBER_OF_NODES_IN_NODEPOOL1:
            description: "test"
            default: "test"
            allowCustom: true
    steps:
      - name: p1_s2
        type: Bash
        configuration:
          inputResources:
            - name: myFirstRepo
        execution:
          onExecute:
          # Data from input resources is available as env variables in the step
            - echo $res_myFirstRepo_commitSha
            # The next two commands add variables to run state, which is available to all downstream steps in this run
            # Run state documentation: https://www.jfrog.com/confluence/display/JFROG/Creating+Stateful+Pipelines#CreatingStatefulPipelines-RunState
            - add_run_variables current_runid=$run_id
            - add_run_variables commitSha=$res_myFirstRepo_commitSha
            # This variable is written to pipeline state in p1_s3.
            # So this will be empty during first run and will be set to prior run number in subsequent runs
            # Pipeline state documentation: https://www.jfrog.com/confluence/display/JFROG/Creating+Stateful+Pipelines#CreatingStatefulPipelines-PipelineState
            - echo "Previous run ID is $prev_runid"
            # Data from input resources is available as env variables in the step
            - echo $res_myFirstRepo_commitSha
            # The next two commands add variables to run state, which is available to all downstream steps in this run
            # Run state documentation: https://www.jfrog.com/confluence/display/JFROG/Creating+Stateful+Pipelines#CreatingStatefulPipelines-RunState
            - add_run_variables current_runid=$run_id
            - add_run_variables commitSha=$res_myFirstRepo_commitSha
            # This variable is written to pipeline state in p1_s3.
            # So this will be empty during first run and will be set to prior run number in subsequent runs
            # Pipeline state documentation: https://www.jfrog.com/confluence/display/JFROG/Creating+Stateful+Pipelines#CreatingStatefulPipelines-PipelineState
            - echo "Previous run ID is $prev_runid"
            - echo "ENV1 values $env1"
            - echo "ENV2 values $env2"
            # Demonstrates the availability of an env variable written to run state during p1_s1
            - echo "Need to have a long string so I can crash API, Need to have a long string so I can crash APINeed to have a long string so I can crash APINeed to have a long string so I can crash APINeed to have a long string so I can crash APINeed to have a long string so I can crash APINeed to have a long string so I can crash APINeed to have a long string so I can crash APINeed to have a long string so I can crash APINeed to have a long string so I can crash APINeed to have a long string so I can crash APINeed to have a long string so I can crash API"